#!/bin/bash

#   aurcheck 0.7 - check for updates from AUR
#
#   Copyright (c) 2009 by Arkham <arkham at archlinux dot us>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your optio n) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.


badarg () {
    echo "$aurcheck: Try \`$aurcheck -h' for more information." >&2
}

usage () {
    echo -e "${GREEN}$aurcheck${NC}: check for updates from AUR"
    echo -e "usage: ${GREEN}$aurcheck${NC} [OPTIONS]"
    echo
    echo "OPTIONS:"
    echo -e " -b:  compare both pkgver and pkgrel ${RED}[default]${NC}"
    echo -e " -c:  colorful output ${RED}[default]${NC}"
    echo " -h:  show this help and quit"
    echo " -n:  nocolor, plain and simple output"
    echo " -o:  compare only pkgver ignoring pkgrel"
    echo " -q:  quiet, display only updates"
    echo -e " -v:  verbose, display all packages ${RED}[default]${NC}"
    echo
}

aurcmp () {
    # Create temporary url and get PKGBUILD
    pkgname="$1"
    url="http://aur.archlinux.org/packages/$pkgname/$pkgname/PKGBUILD"

    PKGBUILD=$(wget -q -O - "$url" | grep -E '^(pkgver=|pkgrel=|_)') || {
        # Package not found in AUR
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "$pkgname: ${YELLOW}not found in AUR${NC}"
        fi
        return 0
    }

    # Compare versions
    aurver="$(eval "$PKGBUILD" &>/dev/null; echo "$pkgver-$pkgrel")" || true
    localver="$(LANG=C pacman -Qi "$pkgname" | awk '/^Version/ {print $3}')"
    if [[ "$ONLYVER" == "true" ]]; then
        aurver="$(echo "$aurver" | cut -d'-' -f1)"
        localver="$(echo "$localver" | cut -d'-' -f1)"
    fi

    result=$(vercmp "$localver" "$aurver") || true

    # Main switch
    if [[ "$result" -lt 0 ]]; then
        echo -e "$pkgname: ${GREEN}$localver => $aurver${NC}"
    elif [[ "$VERBOSE" == "true" ]]; then
        if [[ "$result" -gt 0 ]]; then
            echo -e "$pkgname: (${RED}local=$localver${NC} aur=$aurver)"
        else
            echo "$pkgname: up to date"
        fi
    fi
}

# Safety options:
# - no unset variables
set -o nounset
# - no errors in return values
set -o errexit

# Flags default values
COLOR="true"
ONLYVER="false"
VERBOSE="true"
# Colors! :-)
NC='\e[0m'
RED='\e[1;31m'
GREEN='\e[1;32m'
YELLOW='\e[1;33m'

aurcheck=$(basename $0)

while getopts ":bchnoqv" opt; do
    case "$opt" in
        "b")
            ONLYVER="false"
            ;;
        "c")
            COLOR="true"
            ;;
        "h")
            usage
            exit 0
            ;;
        "n")
            COLOR="false"
            ;;
        "o")
            ONLYVER="true"
            ;;
        "q")
            VERBOSE="false"
            ;;
        "v")
            VERBOSE="true"
            ;;
        "?")
            echo "$aurcheck: invalid option -$OPTARG" >&2
            badarg
            exit 1
            ;;
        ":")
            echo "$aurcheck: option -$OPTARG requires an argument." >&2
            badarg
            exit 1
            ;;
        *)
            echo "$aurcheck: unknown error while processing options." >&2
            badarg
            exit 1
            ;;
    esac
done

# No colors :-(
if [[ $COLOR == "false" ]]; then
    NC=''
    RED=''
    GREEN=''
    YELLOW=''
fi

if [[ "$VERBOSE" == "true" ]]; then
    echo -e "${GREEN}==> ${NC}Searching for new version on AUR"
fi

# Main loop
for pkg in $(pacman -Qqm); do 
    aurcmp "$pkg"
done

exit 0
